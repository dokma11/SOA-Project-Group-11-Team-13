// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tours_service.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ToursService_GetAllTours_FullMethodName          = "/ToursService/GetAllTours"
	ToursService_GetPublishedTours_FullMethodName    = "/ToursService/GetPublishedTours"
	ToursService_GetTourById_FullMethodName          = "/ToursService/GetTourById"
	ToursService_GetToursByAuthorId_FullMethodName   = "/ToursService/GetToursByAuthorId"
	ToursService_CreateTour_FullMethodName           = "/ToursService/CreateTour"
	ToursService_UpdateTour_FullMethodName           = "/ToursService/UpdateTour"
	ToursService_DeleteTour_FullMethodName           = "/ToursService/DeleteTour"
	ToursService_PublishTour_FullMethodName          = "/ToursService/PublishTour"
	ToursService_ArchiveTour_FullMethodName          = "/ToursService/ArchiveTour"
	ToursService_AddToursDurations_FullMethodName    = "/ToursService/AddToursDurations"
	ToursService_AddToursEquipment_FullMethodName    = "/ToursService/AddToursEquipment"
	ToursService_DeleteToursEquipment_FullMethodName = "/ToursService/DeleteToursEquipment"
	ToursService_GetToursEquipment_FullMethodName    = "/ToursService/GetToursEquipment"
)

// ToursServiceClient is the client API for ToursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToursServiceClient interface {
	GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error)
	GetPublishedTours(ctx context.Context, in *GetPublishedToursRequest, opts ...grpc.CallOption) (*GetPublishedToursResponse, error)
	GetTourById(ctx context.Context, in *GetTourByIdRequest, opts ...grpc.CallOption) (*GetTourByIdResponse, error)
	GetToursByAuthorId(ctx context.Context, in *GetToursByAuthorIdRequest, opts ...grpc.CallOption) (*GetToursByAuthorIdResponse, error)
	CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error)
	UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*UpdateTourResponse, error)
	DeleteTour(ctx context.Context, in *DeleteTourRequest, opts ...grpc.CallOption) (*DeleteTourResponse, error)
	PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error)
	ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error)
	AddToursDurations(ctx context.Context, in *AddToursDurationsRequest, opts ...grpc.CallOption) (*AddToursDurationsResponse, error)
	AddToursEquipment(ctx context.Context, in *AddToursEquipmentRequest, opts ...grpc.CallOption) (*AddToursEquipmentResponse, error)
	DeleteToursEquipment(ctx context.Context, in *DeleteToursEquipmentRequest, opts ...grpc.CallOption) (*DeleteToursEquipmentResponse, error)
	GetToursEquipment(ctx context.Context, in *GetToursEquipmentRequest, opts ...grpc.CallOption) (*GetToursEquipmentResponse, error)
}

type toursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToursServiceClient(cc grpc.ClientConnInterface) ToursServiceClient {
	return &toursServiceClient{cc}
}

func (c *toursServiceClient) GetAllTours(ctx context.Context, in *GetAllToursRequest, opts ...grpc.CallOption) (*GetAllToursResponse, error) {
	out := new(GetAllToursResponse)
	err := c.cc.Invoke(ctx, ToursService_GetAllTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetPublishedTours(ctx context.Context, in *GetPublishedToursRequest, opts ...grpc.CallOption) (*GetPublishedToursResponse, error) {
	out := new(GetPublishedToursResponse)
	err := c.cc.Invoke(ctx, ToursService_GetPublishedTours_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetTourById(ctx context.Context, in *GetTourByIdRequest, opts ...grpc.CallOption) (*GetTourByIdResponse, error) {
	out := new(GetTourByIdResponse)
	err := c.cc.Invoke(ctx, ToursService_GetTourById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetToursByAuthorId(ctx context.Context, in *GetToursByAuthorIdRequest, opts ...grpc.CallOption) (*GetToursByAuthorIdResponse, error) {
	out := new(GetToursByAuthorIdResponse)
	err := c.cc.Invoke(ctx, ToursService_GetToursByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) CreateTour(ctx context.Context, in *CreateTourRequest, opts ...grpc.CallOption) (*CreateTourResponse, error) {
	out := new(CreateTourResponse)
	err := c.cc.Invoke(ctx, ToursService_CreateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) UpdateTour(ctx context.Context, in *UpdateTourRequest, opts ...grpc.CallOption) (*UpdateTourResponse, error) {
	out := new(UpdateTourResponse)
	err := c.cc.Invoke(ctx, ToursService_UpdateTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) DeleteTour(ctx context.Context, in *DeleteTourRequest, opts ...grpc.CallOption) (*DeleteTourResponse, error) {
	out := new(DeleteTourResponse)
	err := c.cc.Invoke(ctx, ToursService_DeleteTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) PublishTour(ctx context.Context, in *PublishTourRequest, opts ...grpc.CallOption) (*PublishTourResponse, error) {
	out := new(PublishTourResponse)
	err := c.cc.Invoke(ctx, ToursService_PublishTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) ArchiveTour(ctx context.Context, in *ArchiveTourRequest, opts ...grpc.CallOption) (*ArchiveTourResponse, error) {
	out := new(ArchiveTourResponse)
	err := c.cc.Invoke(ctx, ToursService_ArchiveTour_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) AddToursDurations(ctx context.Context, in *AddToursDurationsRequest, opts ...grpc.CallOption) (*AddToursDurationsResponse, error) {
	out := new(AddToursDurationsResponse)
	err := c.cc.Invoke(ctx, ToursService_AddToursDurations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) AddToursEquipment(ctx context.Context, in *AddToursEquipmentRequest, opts ...grpc.CallOption) (*AddToursEquipmentResponse, error) {
	out := new(AddToursEquipmentResponse)
	err := c.cc.Invoke(ctx, ToursService_AddToursEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) DeleteToursEquipment(ctx context.Context, in *DeleteToursEquipmentRequest, opts ...grpc.CallOption) (*DeleteToursEquipmentResponse, error) {
	out := new(DeleteToursEquipmentResponse)
	err := c.cc.Invoke(ctx, ToursService_DeleteToursEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toursServiceClient) GetToursEquipment(ctx context.Context, in *GetToursEquipmentRequest, opts ...grpc.CallOption) (*GetToursEquipmentResponse, error) {
	out := new(GetToursEquipmentResponse)
	err := c.cc.Invoke(ctx, ToursService_GetToursEquipment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToursServiceServer is the server API for ToursService service.
// All implementations must embed UnimplementedToursServiceServer
// for forward compatibility
type ToursServiceServer interface {
	GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error)
	GetPublishedTours(context.Context, *GetPublishedToursRequest) (*GetPublishedToursResponse, error)
	GetTourById(context.Context, *GetTourByIdRequest) (*GetTourByIdResponse, error)
	GetToursByAuthorId(context.Context, *GetToursByAuthorIdRequest) (*GetToursByAuthorIdResponse, error)
	CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error)
	UpdateTour(context.Context, *UpdateTourRequest) (*UpdateTourResponse, error)
	DeleteTour(context.Context, *DeleteTourRequest) (*DeleteTourResponse, error)
	PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error)
	ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error)
	AddToursDurations(context.Context, *AddToursDurationsRequest) (*AddToursDurationsResponse, error)
	AddToursEquipment(context.Context, *AddToursEquipmentRequest) (*AddToursEquipmentResponse, error)
	DeleteToursEquipment(context.Context, *DeleteToursEquipmentRequest) (*DeleteToursEquipmentResponse, error)
	GetToursEquipment(context.Context, *GetToursEquipmentRequest) (*GetToursEquipmentResponse, error)
	mustEmbedUnimplementedToursServiceServer()
}

// UnimplementedToursServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToursServiceServer struct {
}

func (UnimplementedToursServiceServer) GetAllTours(context.Context, *GetAllToursRequest) (*GetAllToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTours not implemented")
}
func (UnimplementedToursServiceServer) GetPublishedTours(context.Context, *GetPublishedToursRequest) (*GetPublishedToursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishedTours not implemented")
}
func (UnimplementedToursServiceServer) GetTourById(context.Context, *GetTourByIdRequest) (*GetTourByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTourById not implemented")
}
func (UnimplementedToursServiceServer) GetToursByAuthorId(context.Context, *GetToursByAuthorIdRequest) (*GetToursByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursByAuthorId not implemented")
}
func (UnimplementedToursServiceServer) CreateTour(context.Context, *CreateTourRequest) (*CreateTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTour not implemented")
}
func (UnimplementedToursServiceServer) UpdateTour(context.Context, *UpdateTourRequest) (*UpdateTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTour not implemented")
}
func (UnimplementedToursServiceServer) DeleteTour(context.Context, *DeleteTourRequest) (*DeleteTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTour not implemented")
}
func (UnimplementedToursServiceServer) PublishTour(context.Context, *PublishTourRequest) (*PublishTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTour not implemented")
}
func (UnimplementedToursServiceServer) ArchiveTour(context.Context, *ArchiveTourRequest) (*ArchiveTourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTour not implemented")
}
func (UnimplementedToursServiceServer) AddToursDurations(context.Context, *AddToursDurationsRequest) (*AddToursDurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToursDurations not implemented")
}
func (UnimplementedToursServiceServer) AddToursEquipment(context.Context, *AddToursEquipmentRequest) (*AddToursEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToursEquipment not implemented")
}
func (UnimplementedToursServiceServer) DeleteToursEquipment(context.Context, *DeleteToursEquipmentRequest) (*DeleteToursEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToursEquipment not implemented")
}
func (UnimplementedToursServiceServer) GetToursEquipment(context.Context, *GetToursEquipmentRequest) (*GetToursEquipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToursEquipment not implemented")
}
func (UnimplementedToursServiceServer) mustEmbedUnimplementedToursServiceServer() {}

// UnsafeToursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToursServiceServer will
// result in compilation errors.
type UnsafeToursServiceServer interface {
	mustEmbedUnimplementedToursServiceServer()
}

func RegisterToursServiceServer(s grpc.ServiceRegistrar, srv ToursServiceServer) {
	s.RegisterService(&ToursService_ServiceDesc, srv)
}

func _ToursService_GetAllTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetAllTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetAllTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetAllTours(ctx, req.(*GetAllToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetPublishedTours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublishedToursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetPublishedTours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetPublishedTours_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetPublishedTours(ctx, req.(*GetPublishedToursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetTourById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTourByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetTourById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetTourById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetTourById(ctx, req.(*GetTourByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetToursByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetToursByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetToursByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetToursByAuthorId(ctx, req.(*GetToursByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_CreateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).CreateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_CreateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).CreateTour(ctx, req.(*CreateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_UpdateTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).UpdateTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_UpdateTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).UpdateTour(ctx, req.(*UpdateTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_DeleteTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).DeleteTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_DeleteTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).DeleteTour(ctx, req.(*DeleteTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_PublishTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).PublishTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_PublishTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).PublishTour(ctx, req.(*PublishTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_ArchiveTour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).ArchiveTour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_ArchiveTour_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).ArchiveTour(ctx, req.(*ArchiveTourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_AddToursDurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToursDurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).AddToursDurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_AddToursDurations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).AddToursDurations(ctx, req.(*AddToursDurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_AddToursEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToursEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).AddToursEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_AddToursEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).AddToursEquipment(ctx, req.(*AddToursEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_DeleteToursEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteToursEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).DeleteToursEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_DeleteToursEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).DeleteToursEquipment(ctx, req.(*DeleteToursEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToursService_GetToursEquipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetToursEquipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToursServiceServer).GetToursEquipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ToursService_GetToursEquipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToursServiceServer).GetToursEquipment(ctx, req.(*GetToursEquipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToursService_ServiceDesc is the grpc.ServiceDesc for ToursService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToursService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ToursService",
	HandlerType: (*ToursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTours",
			Handler:    _ToursService_GetAllTours_Handler,
		},
		{
			MethodName: "GetPublishedTours",
			Handler:    _ToursService_GetPublishedTours_Handler,
		},
		{
			MethodName: "GetTourById",
			Handler:    _ToursService_GetTourById_Handler,
		},
		{
			MethodName: "GetToursByAuthorId",
			Handler:    _ToursService_GetToursByAuthorId_Handler,
		},
		{
			MethodName: "CreateTour",
			Handler:    _ToursService_CreateTour_Handler,
		},
		{
			MethodName: "UpdateTour",
			Handler:    _ToursService_UpdateTour_Handler,
		},
		{
			MethodName: "DeleteTour",
			Handler:    _ToursService_DeleteTour_Handler,
		},
		{
			MethodName: "PublishTour",
			Handler:    _ToursService_PublishTour_Handler,
		},
		{
			MethodName: "ArchiveTour",
			Handler:    _ToursService_ArchiveTour_Handler,
		},
		{
			MethodName: "AddToursDurations",
			Handler:    _ToursService_AddToursDurations_Handler,
		},
		{
			MethodName: "AddToursEquipment",
			Handler:    _ToursService_AddToursEquipment_Handler,
		},
		{
			MethodName: "DeleteToursEquipment",
			Handler:    _ToursService_DeleteToursEquipment_Handler,
		},
		{
			MethodName: "GetToursEquipment",
			Handler:    _ToursService_GetToursEquipment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tours_service.proto",
}
