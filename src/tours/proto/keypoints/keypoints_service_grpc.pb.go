// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: keypoints_service.proto

package keyPoints

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyPointsService_GetKeyPointById_FullMethodName      = "/KeyPointsService/GetKeyPointById"
	KeyPointsService_GetAllKeyPoints_FullMethodName      = "/KeyPointsService/GetAllKeyPoints"
	KeyPointsService_GetKeyPointsByTourId_FullMethodName = "/KeyPointsService/GetKeyPointsByTourId"
	KeyPointsService_CreateKeyPoint_FullMethodName       = "/KeyPointsService/CreateKeyPoint"
	KeyPointsService_UpdateKeyPoint_FullMethodName       = "/KeyPointsService/UpdateKeyPoint"
	KeyPointsService_DeleteKeyPoint_FullMethodName       = "/KeyPointsService/DeleteKeyPoint"
)

// KeyPointsServiceClient is the client API for KeyPointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyPointsServiceClient interface {
	GetKeyPointById(ctx context.Context, in *GetKeyPointByIdRequest, opts ...grpc.CallOption) (*GetKeyPointByIdResponse, error)
	GetAllKeyPoints(ctx context.Context, in *GetAllKeyPointsRequest, opts ...grpc.CallOption) (*GetAllKeyPointsResponse, error)
	GetKeyPointsByTourId(ctx context.Context, in *GetKeyPointsByTourIdRequest, opts ...grpc.CallOption) (*GetKeyPointsByTourIdResponse, error)
	CreateKeyPoint(ctx context.Context, in *CreateKeyPointRequest, opts ...grpc.CallOption) (*CreateKeyPointResponse, error)
	UpdateKeyPoint(ctx context.Context, in *UpdateKeyPointRequest, opts ...grpc.CallOption) (*UpdateKeyPointResponse, error)
	DeleteKeyPoint(ctx context.Context, in *DeleteKeyPointRequest, opts ...grpc.CallOption) (*DeleteKeyPointResponse, error)
}

type keyPointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyPointsServiceClient(cc grpc.ClientConnInterface) KeyPointsServiceClient {
	return &keyPointsServiceClient{cc}
}

func (c *keyPointsServiceClient) GetKeyPointById(ctx context.Context, in *GetKeyPointByIdRequest, opts ...grpc.CallOption) (*GetKeyPointByIdResponse, error) {
	out := new(GetKeyPointByIdResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_GetKeyPointById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyPointsServiceClient) GetAllKeyPoints(ctx context.Context, in *GetAllKeyPointsRequest, opts ...grpc.CallOption) (*GetAllKeyPointsResponse, error) {
	out := new(GetAllKeyPointsResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_GetAllKeyPoints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyPointsServiceClient) GetKeyPointsByTourId(ctx context.Context, in *GetKeyPointsByTourIdRequest, opts ...grpc.CallOption) (*GetKeyPointsByTourIdResponse, error) {
	out := new(GetKeyPointsByTourIdResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_GetKeyPointsByTourId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyPointsServiceClient) CreateKeyPoint(ctx context.Context, in *CreateKeyPointRequest, opts ...grpc.CallOption) (*CreateKeyPointResponse, error) {
	out := new(CreateKeyPointResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_CreateKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyPointsServiceClient) UpdateKeyPoint(ctx context.Context, in *UpdateKeyPointRequest, opts ...grpc.CallOption) (*UpdateKeyPointResponse, error) {
	out := new(UpdateKeyPointResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_UpdateKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyPointsServiceClient) DeleteKeyPoint(ctx context.Context, in *DeleteKeyPointRequest, opts ...grpc.CallOption) (*DeleteKeyPointResponse, error) {
	out := new(DeleteKeyPointResponse)
	err := c.cc.Invoke(ctx, KeyPointsService_DeleteKeyPoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyPointsServiceServer is the server API for KeyPointsService service.
// All implementations must embed UnimplementedKeyPointsServiceServer
// for forward compatibility
type KeyPointsServiceServer interface {
	GetKeyPointById(context.Context, *GetKeyPointByIdRequest) (*GetKeyPointByIdResponse, error)
	GetAllKeyPoints(context.Context, *GetAllKeyPointsRequest) (*GetAllKeyPointsResponse, error)
	GetKeyPointsByTourId(context.Context, *GetKeyPointsByTourIdRequest) (*GetKeyPointsByTourIdResponse, error)
	CreateKeyPoint(context.Context, *CreateKeyPointRequest) (*CreateKeyPointResponse, error)
	UpdateKeyPoint(context.Context, *UpdateKeyPointRequest) (*UpdateKeyPointResponse, error)
	DeleteKeyPoint(context.Context, *DeleteKeyPointRequest) (*DeleteKeyPointResponse, error)
	mustEmbedUnimplementedKeyPointsServiceServer()
}

// UnimplementedKeyPointsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyPointsServiceServer struct {
}

func (UnimplementedKeyPointsServiceServer) GetKeyPointById(context.Context, *GetKeyPointByIdRequest) (*GetKeyPointByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPointById not implemented")
}
func (UnimplementedKeyPointsServiceServer) GetAllKeyPoints(context.Context, *GetAllKeyPointsRequest) (*GetAllKeyPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllKeyPoints not implemented")
}
func (UnimplementedKeyPointsServiceServer) GetKeyPointsByTourId(context.Context, *GetKeyPointsByTourIdRequest) (*GetKeyPointsByTourIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyPointsByTourId not implemented")
}
func (UnimplementedKeyPointsServiceServer) CreateKeyPoint(context.Context, *CreateKeyPointRequest) (*CreateKeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPoint not implemented")
}
func (UnimplementedKeyPointsServiceServer) UpdateKeyPoint(context.Context, *UpdateKeyPointRequest) (*UpdateKeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyPoint not implemented")
}
func (UnimplementedKeyPointsServiceServer) DeleteKeyPoint(context.Context, *DeleteKeyPointRequest) (*DeleteKeyPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKeyPoint not implemented")
}
func (UnimplementedKeyPointsServiceServer) mustEmbedUnimplementedKeyPointsServiceServer() {}

// UnsafeKeyPointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyPointsServiceServer will
// result in compilation errors.
type UnsafeKeyPointsServiceServer interface {
	mustEmbedUnimplementedKeyPointsServiceServer()
}

func RegisterKeyPointsServiceServer(s grpc.ServiceRegistrar, srv KeyPointsServiceServer) {
	s.RegisterService(&KeyPointsService_ServiceDesc, srv)
}

func _KeyPointsService_GetKeyPointById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyPointByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).GetKeyPointById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_GetKeyPointById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).GetKeyPointById(ctx, req.(*GetKeyPointByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyPointsService_GetAllKeyPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKeyPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).GetAllKeyPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_GetAllKeyPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).GetAllKeyPoints(ctx, req.(*GetAllKeyPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyPointsService_GetKeyPointsByTourId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyPointsByTourIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).GetKeyPointsByTourId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_GetKeyPointsByTourId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).GetKeyPointsByTourId(ctx, req.(*GetKeyPointsByTourIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyPointsService_CreateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).CreateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_CreateKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).CreateKeyPoint(ctx, req.(*CreateKeyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyPointsService_UpdateKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).UpdateKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_UpdateKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).UpdateKeyPoint(ctx, req.(*UpdateKeyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyPointsService_DeleteKeyPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyPointsServiceServer).DeleteKeyPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyPointsService_DeleteKeyPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyPointsServiceServer).DeleteKeyPoint(ctx, req.(*DeleteKeyPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyPointsService_ServiceDesc is the grpc.ServiceDesc for KeyPointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyPointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeyPointsService",
	HandlerType: (*KeyPointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyPointById",
			Handler:    _KeyPointsService_GetKeyPointById_Handler,
		},
		{
			MethodName: "GetAllKeyPoints",
			Handler:    _KeyPointsService_GetAllKeyPoints_Handler,
		},
		{
			MethodName: "GetKeyPointsByTourId",
			Handler:    _KeyPointsService_GetKeyPointsByTourId_Handler,
		},
		{
			MethodName: "CreateKeyPoint",
			Handler:    _KeyPointsService_CreateKeyPoint_Handler,
		},
		{
			MethodName: "UpdateKeyPoint",
			Handler:    _KeyPointsService_UpdateKeyPoint_Handler,
		},
		{
			MethodName: "DeleteKeyPoint",
			Handler:    _KeyPointsService_DeleteKeyPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keypoints_service.proto",
}
