// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: facilities_service.proto

package facilities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FacilitiesService_GetAll_FullMethodName        = "/FacilitiesService/GetAll"
	FacilitiesService_GetByAuthorId_FullMethodName = "/FacilitiesService/GetByAuthorId"
	FacilitiesService_Create_FullMethodName        = "/FacilitiesService/Create"
	FacilitiesService_Update_FullMethodName        = "/FacilitiesService/Update"
	FacilitiesService_Delete_FullMethodName        = "/FacilitiesService/Delete"
)

// FacilitiesServiceClient is the client API for FacilitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacilitiesServiceClient interface {
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetByAuthorId(ctx context.Context, in *GetByAuthorIdRequest, opts ...grpc.CallOption) (*GetByAuthorIdResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type facilitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacilitiesServiceClient(cc grpc.ClientConnInterface) FacilitiesServiceClient {
	return &facilitiesServiceClient{cc}
}

func (c *facilitiesServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) GetByAuthorId(ctx context.Context, in *GetByAuthorIdRequest, opts ...grpc.CallOption) (*GetByAuthorIdResponse, error) {
	out := new(GetByAuthorIdResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_GetByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacilitiesServiceServer is the server API for FacilitiesService service.
// All implementations must embed UnimplementedFacilitiesServiceServer
// for forward compatibility
type FacilitiesServiceServer interface {
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetByAuthorId(context.Context, *GetByAuthorIdRequest) (*GetByAuthorIdResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedFacilitiesServiceServer()
}

// UnimplementedFacilitiesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFacilitiesServiceServer struct {
}

func (UnimplementedFacilitiesServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFacilitiesServiceServer) GetByAuthorId(context.Context, *GetByAuthorIdRequest) (*GetByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAuthorId not implemented")
}
func (UnimplementedFacilitiesServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFacilitiesServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFacilitiesServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFacilitiesServiceServer) mustEmbedUnimplementedFacilitiesServiceServer() {}

// UnsafeFacilitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacilitiesServiceServer will
// result in compilation errors.
type UnsafeFacilitiesServiceServer interface {
	mustEmbedUnimplementedFacilitiesServiceServer()
}

func RegisterFacilitiesServiceServer(s grpc.ServiceRegistrar, srv FacilitiesServiceServer) {
	s.RegisterService(&FacilitiesService_ServiceDesc, srv)
}

func _FacilitiesService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_GetByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).GetByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_GetByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).GetByAuthorId(ctx, req.(*GetByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacilitiesService_ServiceDesc is the grpc.ServiceDesc for FacilitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacilitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FacilitiesService",
	HandlerType: (*FacilitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _FacilitiesService_GetAll_Handler,
		},
		{
			MethodName: "GetByAuthorId",
			Handler:    _FacilitiesService_GetByAuthorId_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FacilitiesService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FacilitiesService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FacilitiesService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facilities_service.proto",
}
