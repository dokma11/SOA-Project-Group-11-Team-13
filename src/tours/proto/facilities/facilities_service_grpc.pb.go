// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: facilities_service.proto

package facilities

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FacilitiesService_GetAllFacilities_FullMethodName        = "/FacilitiesService/GetAllFacilities"
	FacilitiesService_GetFacilitiesByAuthorId_FullMethodName = "/FacilitiesService/GetFacilitiesByAuthorId"
	FacilitiesService_CreateFacility_FullMethodName          = "/FacilitiesService/CreateFacility"
	FacilitiesService_UpdateFacility_FullMethodName          = "/FacilitiesService/UpdateFacility"
	FacilitiesService_DeleteFacility_FullMethodName          = "/FacilitiesService/DeleteFacility"
)

// FacilitiesServiceClient is the client API for FacilitiesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacilitiesServiceClient interface {
	GetAllFacilities(ctx context.Context, in *GetAllFacilitiesRequest, opts ...grpc.CallOption) (*GetAllFacilitiesResponse, error)
	GetFacilitiesByAuthorId(ctx context.Context, in *GetFacilitiesByAuthorIdRequest, opts ...grpc.CallOption) (*GetFacilitiesByAuthorIdResponse, error)
	CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*CreateFacilityResponse, error)
	UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*UpdateFacilityResponse, error)
	DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*DeleteFacilityResponse, error)
}

type facilitiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFacilitiesServiceClient(cc grpc.ClientConnInterface) FacilitiesServiceClient {
	return &facilitiesServiceClient{cc}
}

func (c *facilitiesServiceClient) GetAllFacilities(ctx context.Context, in *GetAllFacilitiesRequest, opts ...grpc.CallOption) (*GetAllFacilitiesResponse, error) {
	out := new(GetAllFacilitiesResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_GetAllFacilities_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) GetFacilitiesByAuthorId(ctx context.Context, in *GetFacilitiesByAuthorIdRequest, opts ...grpc.CallOption) (*GetFacilitiesByAuthorIdResponse, error) {
	out := new(GetFacilitiesByAuthorIdResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_GetFacilitiesByAuthorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) CreateFacility(ctx context.Context, in *CreateFacilityRequest, opts ...grpc.CallOption) (*CreateFacilityResponse, error) {
	out := new(CreateFacilityResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_CreateFacility_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) UpdateFacility(ctx context.Context, in *UpdateFacilityRequest, opts ...grpc.CallOption) (*UpdateFacilityResponse, error) {
	out := new(UpdateFacilityResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_UpdateFacility_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesServiceClient) DeleteFacility(ctx context.Context, in *DeleteFacilityRequest, opts ...grpc.CallOption) (*DeleteFacilityResponse, error) {
	out := new(DeleteFacilityResponse)
	err := c.cc.Invoke(ctx, FacilitiesService_DeleteFacility_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacilitiesServiceServer is the server API for FacilitiesService service.
// All implementations must embed UnimplementedFacilitiesServiceServer
// for forward compatibility
type FacilitiesServiceServer interface {
	GetAllFacilities(context.Context, *GetAllFacilitiesRequest) (*GetAllFacilitiesResponse, error)
	GetFacilitiesByAuthorId(context.Context, *GetFacilitiesByAuthorIdRequest) (*GetFacilitiesByAuthorIdResponse, error)
	CreateFacility(context.Context, *CreateFacilityRequest) (*CreateFacilityResponse, error)
	UpdateFacility(context.Context, *UpdateFacilityRequest) (*UpdateFacilityResponse, error)
	DeleteFacility(context.Context, *DeleteFacilityRequest) (*DeleteFacilityResponse, error)
	mustEmbedUnimplementedFacilitiesServiceServer()
}

// UnimplementedFacilitiesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFacilitiesServiceServer struct {
}

func (UnimplementedFacilitiesServiceServer) GetAllFacilities(context.Context, *GetAllFacilitiesRequest) (*GetAllFacilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFacilities not implemented")
}
func (UnimplementedFacilitiesServiceServer) GetFacilitiesByAuthorId(context.Context, *GetFacilitiesByAuthorIdRequest) (*GetFacilitiesByAuthorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacilitiesByAuthorId not implemented")
}
func (UnimplementedFacilitiesServiceServer) CreateFacility(context.Context, *CreateFacilityRequest) (*CreateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFacility not implemented")
}
func (UnimplementedFacilitiesServiceServer) UpdateFacility(context.Context, *UpdateFacilityRequest) (*UpdateFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFacility not implemented")
}
func (UnimplementedFacilitiesServiceServer) DeleteFacility(context.Context, *DeleteFacilityRequest) (*DeleteFacilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFacility not implemented")
}
func (UnimplementedFacilitiesServiceServer) mustEmbedUnimplementedFacilitiesServiceServer() {}

// UnsafeFacilitiesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacilitiesServiceServer will
// result in compilation errors.
type UnsafeFacilitiesServiceServer interface {
	mustEmbedUnimplementedFacilitiesServiceServer()
}

func RegisterFacilitiesServiceServer(s grpc.ServiceRegistrar, srv FacilitiesServiceServer) {
	s.RegisterService(&FacilitiesService_ServiceDesc, srv)
}

func _FacilitiesService_GetAllFacilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFacilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).GetAllFacilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_GetAllFacilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).GetAllFacilities(ctx, req.(*GetAllFacilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_GetFacilitiesByAuthorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFacilitiesByAuthorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).GetFacilitiesByAuthorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_GetFacilitiesByAuthorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).GetFacilitiesByAuthorId(ctx, req.(*GetFacilitiesByAuthorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_CreateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).CreateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_CreateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).CreateFacility(ctx, req.(*CreateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_UpdateFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).UpdateFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_UpdateFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).UpdateFacility(ctx, req.(*UpdateFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesService_DeleteFacility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFacilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesServiceServer).DeleteFacility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacilitiesService_DeleteFacility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesServiceServer).DeleteFacility(ctx, req.(*DeleteFacilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacilitiesService_ServiceDesc is the grpc.ServiceDesc for FacilitiesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacilitiesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FacilitiesService",
	HandlerType: (*FacilitiesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllFacilities",
			Handler:    _FacilitiesService_GetAllFacilities_Handler,
		},
		{
			MethodName: "GetFacilitiesByAuthorId",
			Handler:    _FacilitiesService_GetFacilitiesByAuthorId_Handler,
		},
		{
			MethodName: "CreateFacility",
			Handler:    _FacilitiesService_CreateFacility_Handler,
		},
		{
			MethodName: "UpdateFacility",
			Handler:    _FacilitiesService_UpdateFacility_Handler,
		},
		{
			MethodName: "DeleteFacility",
			Handler:    _FacilitiesService_DeleteFacility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facilities_service.proto",
}
