version: '3.8'

services:

  tours:
    build: tours/ # sam ce build-ovati prvi put, svaki drugi put ce koristiti postojecu sliku koju je build-ovao
    image: tours # naziv slike koju build-uje
    restart: always
    networks:
      - database
    ports:
      - 8081:8081
    depends_on:
      - toursdb # pre pokretanja ovog kontejnera treba prvo da se pokrene baza

  blogs:
    build: blogs/
    image: blogs
    restart: always
    networks:
      - database
    ports:
      - 8082:8082
    depends_on:
      - blogsdb

  followers:
    build: followers/
    image: followers
    container_name: followers-service
    restart: always
    networks:
      - database
    #Mapping ports
    ports:
      # <port_on_local>:<port_in_machine>
      - 8084:8084
    #Will be accessible through os.Getenv("PORT")
    environment:
      - PORT=8084
      # NoSQL: environment variable holding connection URI for Neo4J database
      # Local DB instance
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=nekaSifra
    depends_on:
      neo4j:
        condition: service_healthy
  



  toursdb:
    image: postgres
    container_name: tours-database
    networks:
      - database
    ports:
      - 5433:5432 # na pgAdmin-u se moze povezati na bazu na port 5433
    environment:
      - POSTGRES_DB=soa-gorm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    volumes:
      - tours-data:/var/lib/postgresql/data
  
  blogsdb:
    image: postgres
    container_name: blogs-database
    networks:
      - database
    ports:
      - 5434:5432
    environment:
      - POSTGRES_DB=soa-blogs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    volumes:
      - blogs-data:/var/lib/postgresql/data
  
  # NoSQL: Neo4J DB
  neo4j:
    image: neo4j
    restart: always
    networks:
      - database
    ports:
      # bolt
      - "7687:7687"
      # http
      - "7474:7474"
      # https
      - "7473:7473"
    # Docker healtcheck - checks if database is "alive"
    healthcheck:
      # test: [ "CMD-SHELL", "echo RETURN 1 | cypher-shell -a <NEO4J_dbms_connector_bolt_listen__address> -u <user defined username> -p <user defined password> || exit 1" ]
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/var/lib/neo4j/data

  blogs-mongodb:
    image: mongo
    container_name: blogs-mongodb
    ports:
      - 27017:27017
    networks:
      - database
    volumes:
      - blogs-mongodb-data:/data/db
      

volumes:
  tours-data:
    driver: local
    name: tours-data
  blogs-data:
    driver: local
    name: blogs-data
  blogs-mongodb-data:
    driver: local
    name: blogs-mongodb-data
  neo4j_data:
    driver: local
    name: followers-data

networks:
  database:
    name: database
    driver: bridge

# Slike koje postoje se mogu izlistati komandom: docker images
# Build-ovane slike se mogu izbrisati komandom: docker rmi <slika> (npr. docker rmi tours)
# Slike sa tagom <none> se mogu izbrisati komandom: docker rmi $(docker images --filter "dangling=true" -q --no-trunc)