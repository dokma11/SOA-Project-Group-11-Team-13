version: '3.8'

x-logging: &fluent-bit
  driver: fluentd
  options:
    fluentd-address: "0.0.0.0:24224"

services:

  tours:
    build: tours/ # sam ce build-ovati prvi put, svaki drugi put ce koristiti postojecu sliku koju je build-ovao
    image: tours # naziv slike koju build-uje
    restart: always
    networks:
      - database
      - monitoring
    ports:
      - 8081:8081
    environment:
      - NATS_HOST=nats
      - NATS_PORT=4222
      - DB_HOST=tours-database
      - DB_PORT=5432
      - "8081:8081"
    logging: *fluent-bit
    depends_on:
      - toursdb # pre pokretanja ovog kontejnera treba prvo da se pokrene baza
      - nats

  blogs:
    build: blogs/
    image: blogs
    restart: always
    networks:
      - database
    ports:
      - "8082:8082"
    depends_on:
      - blogsdb

  followers:
    build: followers/
    image: followers
    container_name: followers-service
    restart: always
    networks:
      - database
    ports:
      - "8084:8084"
    environment:
      - PORT=8084
      - NEO4J_DB=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASS=nekaSifra
    depends_on:
      neo4j:
        condition: service_healthy

  jwt:
    build: jwt/
    image: jwt
    restart: always
    networks:
      - database
    ports:
      - 8085:8085

  tour-search:
    build: tour-search/
    image: tour-search
    container_name: tour-search
    restart: always
    ports:
      - 8086:8080
    environment:
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - NATS_HOST=nats
      - NATS_PORT=4222
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - database

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - database
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  nats:
    image: nats
    container_name: nats
    ports:
      - 4222:4222
    networks:
      - database

      - "8085:8085"

  prometheus:
    image: docker.io/prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - 9090:9090
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped

  grafana:
    image: docker.io/grafana/grafana-oss:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped
  
  #windows_exporter:
    #image: prometheuscommunity/windows-exporter:master
    #container_name: windows_exporter
    #ports:
    #  - "9182:9182"
    #command:
    #  - '--collectors.enabled=cpu,memory,logical_disk,net'
    #  - '--log.level=info'
    #restart: unless-stopped

  toursdb:
    image: postgres
    container_name: tours-database
    networks:
      - database
      - monitoring
    ports:
      - "5433:5432" # na pgAdmin-u se moze povezati na bazu na port 5433
    environment:
      - POSTGRES_DB=soa-gorm
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    logging: *fluent-bit
    volumes:
      - tours-data:/var/lib/postgresql/data

  blogsdb:
    image: postgres
    container_name: blogs-database
    networks:
      - database
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=soa-blogs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=super
    volumes:
      - blogs-data:/var/lib/postgresql/data
  
  neo4j:
    image: neo4j
    restart: always
    networks:
      - database
    ports:
      - "7687:7687"
      - "7474:7474"
      - "7473:7473"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo RETURN 1 | cypher-shell -a bolt://neo4j:7687 -u neo4j -p nekaSifra || exit 1",
        ]
      interval: 5s
      timeout: 5s
      retries: 10
    environment:
      - NEO4J_AUTH=neo4j/nekaSifra
    volumes:
      - neo4j_data:/var/lib/neo4j/data

  blogs-mongodb:
    image: mongo
    container_name: blogs-mongodb
    ports:
      - "27017:27017"
    networks:
      - database
    volumes:
      - blogs-mongodb-data:/data/db

volumes:
  tours-data:
    driver: local
    name: tours-data
  blogs-data:
    driver: local
    name: blogs-data
  blogs-mongodb-data:
    driver: local 
    name: blogs-mongodb-data
  neo4j_data: 
    driver: local
    name: followers-data 
  elasticsearch-data:
    driver: local

  prometheus-data:
    driver: local
    name: prometheus-data 
  grafana-data:
    driver: local
    name: grafana-data 
  
networks:
  database:
    name: database
    driver: bridge
  monitoring:
    external: true

# Slike koje postoje se mogu izlistati komandom: docker images
# Build-ovane slike se mogu izbrisati komandom: docker rmi <slika> (npr. docker rmi tours)
# Slike sa tagom <none> se mogu izbrisati komandom: docker rmi $(docker images --filter "dangling=true" -q --no-trunc)