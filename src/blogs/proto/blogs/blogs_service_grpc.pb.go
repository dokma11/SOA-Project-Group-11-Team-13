// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogs_service.proto

package blogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogsService_CreateBlog_FullMethodName           = "/BlogsService/CreateBlog"
	BlogsService_GetAllBlogs_FullMethodName          = "/BlogsService/GetAllBlogs"
	BlogsService_GetBlogById_FullMethodName          = "/BlogsService/GetBlogById"
	BlogsService_GetBlogsByAuthorsId_FullMethodName  = "/BlogsService/GetBlogsByAuthorsId"
	BlogsService_GetBlogsByAuthorsIds_FullMethodName = "/BlogsService/GetBlogsByAuthorsIds"
	BlogsService_SearchBlogByName_FullMethodName     = "/BlogsService/SearchBlogByName"
	BlogsService_PublishBlog_FullMethodName          = "/BlogsService/PublishBlog"
	BlogsService_DeleteBlog_FullMethodName           = "/BlogsService/DeleteBlog"
)

// BlogsServiceClient is the client API for BlogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsServiceClient interface {
	CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error)
	GetAllBlogs(ctx context.Context, in *GetAllBlogsRequest, opts ...grpc.CallOption) (*GetAllBlogsResponse, error)
	GetBlogById(ctx context.Context, in *GetBlogByIdRequest, opts ...grpc.CallOption) (*GetBlogByIdResponse, error)
	GetBlogsByAuthorsId(ctx context.Context, in *GetBlogsByAuthorsIdRequest, opts ...grpc.CallOption) (*GetBlogsByAuthorsIdResponse, error)
	GetBlogsByAuthorsIds(ctx context.Context, in *GetBlogsByAuthorsIdsRequest, opts ...grpc.CallOption) (*GetBlogsByAuthorsIdsResponse, error)
	SearchBlogByName(ctx context.Context, in *SearchBlogByNameRequest, opts ...grpc.CallOption) (*SearchBlogByNameResponse, error)
	PublishBlog(ctx context.Context, in *PublishBlogRequest, opts ...grpc.CallOption) (*PublishBlogResponse, error)
	DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error)
}

type blogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsServiceClient(cc grpc.ClientConnInterface) BlogsServiceClient {
	return &blogsServiceClient{cc}
}

func (c *blogsServiceClient) CreateBlog(ctx context.Context, in *CreateBlogRequest, opts ...grpc.CallOption) (*CreateBlogResponse, error) {
	out := new(CreateBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_CreateBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetAllBlogs(ctx context.Context, in *GetAllBlogsRequest, opts ...grpc.CallOption) (*GetAllBlogsResponse, error) {
	out := new(GetAllBlogsResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetAllBlogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetBlogById(ctx context.Context, in *GetBlogByIdRequest, opts ...grpc.CallOption) (*GetBlogByIdResponse, error) {
	out := new(GetBlogByIdResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetBlogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetBlogsByAuthorsId(ctx context.Context, in *GetBlogsByAuthorsIdRequest, opts ...grpc.CallOption) (*GetBlogsByAuthorsIdResponse, error) {
	out := new(GetBlogsByAuthorsIdResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetBlogsByAuthorsId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetBlogsByAuthorsIds(ctx context.Context, in *GetBlogsByAuthorsIdsRequest, opts ...grpc.CallOption) (*GetBlogsByAuthorsIdsResponse, error) {
	out := new(GetBlogsByAuthorsIdsResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetBlogsByAuthorsIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) SearchBlogByName(ctx context.Context, in *SearchBlogByNameRequest, opts ...grpc.CallOption) (*SearchBlogByNameResponse, error) {
	out := new(SearchBlogByNameResponse)
	err := c.cc.Invoke(ctx, BlogsService_SearchBlogByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) PublishBlog(ctx context.Context, in *PublishBlogRequest, opts ...grpc.CallOption) (*PublishBlogResponse, error) {
	out := new(PublishBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_PublishBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) DeleteBlog(ctx context.Context, in *DeleteBlogRequest, opts ...grpc.CallOption) (*DeleteBlogResponse, error) {
	out := new(DeleteBlogResponse)
	err := c.cc.Invoke(ctx, BlogsService_DeleteBlog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServiceServer is the server API for BlogsService service.
// All implementations must embed UnimplementedBlogsServiceServer
// for forward compatibility
type BlogsServiceServer interface {
	CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error)
	GetAllBlogs(context.Context, *GetAllBlogsRequest) (*GetAllBlogsResponse, error)
	GetBlogById(context.Context, *GetBlogByIdRequest) (*GetBlogByIdResponse, error)
	GetBlogsByAuthorsId(context.Context, *GetBlogsByAuthorsIdRequest) (*GetBlogsByAuthorsIdResponse, error)
	GetBlogsByAuthorsIds(context.Context, *GetBlogsByAuthorsIdsRequest) (*GetBlogsByAuthorsIdsResponse, error)
	SearchBlogByName(context.Context, *SearchBlogByNameRequest) (*SearchBlogByNameResponse, error)
	PublishBlog(context.Context, *PublishBlogRequest) (*PublishBlogResponse, error)
	DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error)
	mustEmbedUnimplementedBlogsServiceServer()
}

// UnimplementedBlogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServiceServer struct {
}

func (UnimplementedBlogsServiceServer) CreateBlog(context.Context, *CreateBlogRequest) (*CreateBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlog not implemented")
}
func (UnimplementedBlogsServiceServer) GetAllBlogs(context.Context, *GetAllBlogsRequest) (*GetAllBlogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlogs not implemented")
}
func (UnimplementedBlogsServiceServer) GetBlogById(context.Context, *GetBlogByIdRequest) (*GetBlogByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogById not implemented")
}
func (UnimplementedBlogsServiceServer) GetBlogsByAuthorsId(context.Context, *GetBlogsByAuthorsIdRequest) (*GetBlogsByAuthorsIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogsByAuthorsId not implemented")
}
func (UnimplementedBlogsServiceServer) GetBlogsByAuthorsIds(context.Context, *GetBlogsByAuthorsIdsRequest) (*GetBlogsByAuthorsIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogsByAuthorsIds not implemented")
}
func (UnimplementedBlogsServiceServer) SearchBlogByName(context.Context, *SearchBlogByNameRequest) (*SearchBlogByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBlogByName not implemented")
}
func (UnimplementedBlogsServiceServer) PublishBlog(context.Context, *PublishBlogRequest) (*PublishBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBlog not implemented")
}
func (UnimplementedBlogsServiceServer) DeleteBlog(context.Context, *DeleteBlogRequest) (*DeleteBlogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlog not implemented")
}
func (UnimplementedBlogsServiceServer) mustEmbedUnimplementedBlogsServiceServer() {}

// UnsafeBlogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServiceServer will
// result in compilation errors.
type UnsafeBlogsServiceServer interface {
	mustEmbedUnimplementedBlogsServiceServer()
}

func RegisterBlogsServiceServer(s grpc.ServiceRegistrar, srv BlogsServiceServer) {
	s.RegisterService(&BlogsService_ServiceDesc, srv)
}

func _BlogsService_CreateBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).CreateBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_CreateBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).CreateBlog(ctx, req.(*CreateBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetAllBlogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBlogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetAllBlogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetAllBlogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetAllBlogs(ctx, req.(*GetAllBlogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetBlogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetBlogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetBlogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetBlogById(ctx, req.(*GetBlogByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetBlogsByAuthorsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsByAuthorsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetBlogsByAuthorsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetBlogsByAuthorsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetBlogsByAuthorsId(ctx, req.(*GetBlogsByAuthorsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetBlogsByAuthorsIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogsByAuthorsIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetBlogsByAuthorsIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetBlogsByAuthorsIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetBlogsByAuthorsIds(ctx, req.(*GetBlogsByAuthorsIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_SearchBlogByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBlogByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).SearchBlogByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_SearchBlogByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).SearchBlogByName(ctx, req.(*SearchBlogByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_PublishBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).PublishBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_PublishBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).PublishBlog(ctx, req.(*PublishBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_DeleteBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).DeleteBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_DeleteBlog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).DeleteBlog(ctx, req.(*DeleteBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogsService_ServiceDesc is the grpc.ServiceDesc for BlogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlogsService",
	HandlerType: (*BlogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlog",
			Handler:    _BlogsService_CreateBlog_Handler,
		},
		{
			MethodName: "GetAllBlogs",
			Handler:    _BlogsService_GetAllBlogs_Handler,
		},
		{
			MethodName: "GetBlogById",
			Handler:    _BlogsService_GetBlogById_Handler,
		},
		{
			MethodName: "GetBlogsByAuthorsId",
			Handler:    _BlogsService_GetBlogsByAuthorsId_Handler,
		},
		{
			MethodName: "GetBlogsByAuthorsIds",
			Handler:    _BlogsService_GetBlogsByAuthorsIds_Handler,
		},
		{
			MethodName: "SearchBlogByName",
			Handler:    _BlogsService_SearchBlogByName_Handler,
		},
		{
			MethodName: "PublishBlog",
			Handler:    _BlogsService_PublishBlog_Handler,
		},
		{
			MethodName: "DeleteBlog",
			Handler:    _BlogsService_DeleteBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogs_service.proto",
}
