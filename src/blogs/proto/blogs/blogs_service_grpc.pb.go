// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogs_service.proto

package blogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogsService_Create_FullMethodName          = "/BlogsService/Create"
	BlogsService_GetAll_FullMethodName          = "/BlogsService/GetAll"
	BlogsService_GetById_FullMethodName         = "/BlogsService/GetById"
	BlogsService_GetByReceiverId_FullMethodName = "/BlogsService/GetByReceiverId"
	BlogsService_SearchByName_FullMethodName    = "/BlogsService/SearchByName"
	BlogsService_Publish_FullMethodName         = "/BlogsService/Publish"
	BlogsService_Delete_FullMethodName          = "/BlogsService/Delete"
)

// BlogsServiceClient is the client API for BlogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	GetByReceiverId(ctx context.Context, in *GetByAuthorsIdRequest, opts ...grpc.CallOption) (*GetByAuthorsIdResponse, error)
	SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type blogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsServiceClient(cc grpc.ClientConnInterface) BlogsServiceClient {
	return &blogsServiceClient{cc}
}

func (c *blogsServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, BlogsService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) GetByReceiverId(ctx context.Context, in *GetByAuthorsIdRequest, opts ...grpc.CallOption) (*GetByAuthorsIdResponse, error) {
	out := new(GetByAuthorsIdResponse)
	err := c.cc.Invoke(ctx, BlogsService_GetByReceiverId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error) {
	out := new(SearchByNameResponse)
	err := c.cc.Invoke(ctx, BlogsService_SearchByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, BlogsService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, BlogsService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServiceServer is the server API for BlogsService service.
// All implementations must embed UnimplementedBlogsServiceServer
// for forward compatibility
type BlogsServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	GetByReceiverId(context.Context, *GetByAuthorsIdRequest) (*GetByAuthorsIdResponse, error)
	SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedBlogsServiceServer()
}

// UnimplementedBlogsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServiceServer struct {
}

func (UnimplementedBlogsServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBlogsServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBlogsServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBlogsServiceServer) GetByReceiverId(context.Context, *GetByAuthorsIdRequest) (*GetByAuthorsIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByReceiverId not implemented")
}
func (UnimplementedBlogsServiceServer) SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByName not implemented")
}
func (UnimplementedBlogsServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBlogsServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlogsServiceServer) mustEmbedUnimplementedBlogsServiceServer() {}

// UnsafeBlogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServiceServer will
// result in compilation errors.
type UnsafeBlogsServiceServer interface {
	mustEmbedUnimplementedBlogsServiceServer()
}

func RegisterBlogsServiceServer(s grpc.ServiceRegistrar, srv BlogsServiceServer) {
	s.RegisterService(&BlogsService_ServiceDesc, srv)
}

func _BlogsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_GetByReceiverId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).GetByReceiverId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_GetByReceiverId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).GetByReceiverId(ctx, req.(*GetByAuthorsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_SearchByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).SearchByName(ctx, req.(*SearchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogsService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogsService_ServiceDesc is the grpc.ServiceDesc for BlogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlogsService",
	HandlerType: (*BlogsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BlogsService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BlogsService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _BlogsService_GetById_Handler,
		},
		{
			MethodName: "GetByReceiverId",
			Handler:    _BlogsService_GetByReceiverId_Handler,
		},
		{
			MethodName: "SearchByName",
			Handler:    _BlogsService_SearchByName_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _BlogsService_Publish_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BlogsService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogs_service.proto",
}
