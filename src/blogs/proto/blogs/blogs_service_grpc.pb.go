// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: blogs_service.proto

package blogs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BlogRecommendationService_Create_FullMethodName          = "/BlogRecommendationService/Create"
	BlogRecommendationService_GetAll_FullMethodName          = "/BlogRecommendationService/GetAll"
	BlogRecommendationService_GetById_FullMethodName         = "/BlogRecommendationService/GetById"
	BlogRecommendationService_GetByReceiverId_FullMethodName = "/BlogRecommendationService/GetByReceiverId"
	BlogRecommendationService_SearchByName_FullMethodName    = "/BlogRecommendationService/SearchByName"
	BlogRecommendationService_Publish_FullMethodName         = "/BlogRecommendationService/Publish"
	BlogRecommendationService_Delete_FullMethodName          = "/BlogRecommendationService/Delete"
)

// BlogRecommendationServiceClient is the client API for BlogRecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogRecommendationServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	GetByReceiverId(ctx context.Context, in *GetByAuthorsIdRequest, opts ...grpc.CallOption) (*GetByAuthorsIdResponse, error)
	SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type blogRecommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogRecommendationServiceClient(cc grpc.ClientConnInterface) BlogRecommendationServiceClient {
	return &blogRecommendationServiceClient{cc}
}

func (c *blogRecommendationServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) GetByReceiverId(ctx context.Context, in *GetByAuthorsIdRequest, opts ...grpc.CallOption) (*GetByAuthorsIdResponse, error) {
	out := new(GetByAuthorsIdResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_GetByReceiverId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) SearchByName(ctx context.Context, in *SearchByNameRequest, opts ...grpc.CallOption) (*SearchByNameResponse, error) {
	out := new(SearchByNameResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_SearchByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogRecommendationServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, BlogRecommendationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogRecommendationServiceServer is the server API for BlogRecommendationService service.
// All implementations must embed UnimplementedBlogRecommendationServiceServer
// for forward compatibility
type BlogRecommendationServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	GetByReceiverId(context.Context, *GetByAuthorsIdRequest) (*GetByAuthorsIdResponse, error)
	SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedBlogRecommendationServiceServer()
}

// UnimplementedBlogRecommendationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlogRecommendationServiceServer struct {
}

func (UnimplementedBlogRecommendationServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) GetByReceiverId(context.Context, *GetByAuthorsIdRequest) (*GetByAuthorsIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByReceiverId not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) SearchByName(context.Context, *SearchByNameRequest) (*SearchByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByName not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlogRecommendationServiceServer) mustEmbedUnimplementedBlogRecommendationServiceServer() {
}

// UnsafeBlogRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogRecommendationServiceServer will
// result in compilation errors.
type UnsafeBlogRecommendationServiceServer interface {
	mustEmbedUnimplementedBlogRecommendationServiceServer()
}

func RegisterBlogRecommendationServiceServer(s grpc.ServiceRegistrar, srv BlogRecommendationServiceServer) {
	s.RegisterService(&BlogRecommendationService_ServiceDesc, srv)
}

func _BlogRecommendationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_GetByReceiverId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByAuthorsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).GetByReceiverId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_GetByReceiverId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).GetByReceiverId(ctx, req.(*GetByAuthorsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_SearchByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).SearchByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_SearchByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).SearchByName(ctx, req.(*SearchByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogRecommendationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogRecommendationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogRecommendationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogRecommendationServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogRecommendationService_ServiceDesc is the grpc.ServiceDesc for BlogRecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogRecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BlogRecommendationService",
	HandlerType: (*BlogRecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BlogRecommendationService_Create_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BlogRecommendationService_GetAll_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _BlogRecommendationService_GetById_Handler,
		},
		{
			MethodName: "GetByReceiverId",
			Handler:    _BlogRecommendationService_GetByReceiverId_Handler,
		},
		{
			MethodName: "SearchByName",
			Handler:    _BlogRecommendationService_SearchByName_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _BlogRecommendationService_Publish_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BlogRecommendationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogs_service.proto",
}
