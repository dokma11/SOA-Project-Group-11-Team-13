// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: followers_service.proto

package followers

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowersService_GetUserByUsername_FullMethodName   = "/FollowersService/GetUserByUsername"
	FollowersService_GetFollowers_FullMethodName        = "/FollowersService/GetFollowers"
	FollowersService_GetFollowings_FullMethodName       = "/FollowersService/GetFollowings"
	FollowersService_GetRecommendedUsers_FullMethodName = "/FollowersService/GetRecommendedUsers"
	FollowersService_Unfollow_FullMethodName            = "/FollowersService/Unfollow"
	FollowersService_Follow_FullMethodName              = "/FollowersService/Follow"
	FollowersService_Create_FullMethodName              = "/FollowersService/Create"
)

// FollowersServiceClient is the client API for FollowersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowersServiceClient interface {
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error)
	GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)
	GetFollowings(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error)
	GetRecommendedUsers(ctx context.Context, in *GetRecommendedUsersRequest, opts ...grpc.CallOption) (*GetRecommendedUsersResponse, error)
	Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type followersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowersServiceClient(cc grpc.ClientConnInterface) FollowersServiceClient {
	return &followersServiceClient{cc}
}

func (c *followersServiceClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error) {
	out := new(GetUserByUsernameResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetUserByUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	out := new(GetFollowersResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetFollowers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetFollowings(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error) {
	out := new(GetFollowingsResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetFollowings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) GetRecommendedUsers(ctx context.Context, in *GetRecommendedUsersRequest, opts ...grpc.CallOption) (*GetRecommendedUsersResponse, error) {
	out := new(GetRecommendedUsersResponse)
	err := c.cc.Invoke(ctx, FollowersService_GetRecommendedUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	out := new(UnfollowResponse)
	err := c.cc.Invoke(ctx, FollowersService_Unfollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, FollowersService_Follow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followersServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, FollowersService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowersServiceServer is the server API for FollowersService service.
// All implementations must embed UnimplementedFollowersServiceServer
// for forward compatibility
type FollowersServiceServer interface {
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error)
	GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error)
	GetFollowings(context.Context, *GetFollowingsRequest) (*GetFollowingsResponse, error)
	GetRecommendedUsers(context.Context, *GetRecommendedUsersRequest) (*GetRecommendedUsersResponse, error)
	Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error)
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedFollowersServiceServer()
}

// UnimplementedFollowersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowersServiceServer struct {
}

func (UnimplementedFollowersServiceServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedFollowersServiceServer) GetFollowers(context.Context, *GetFollowersRequest) (*GetFollowersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowers not implemented")
}
func (UnimplementedFollowersServiceServer) GetFollowings(context.Context, *GetFollowingsRequest) (*GetFollowingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowings not implemented")
}
func (UnimplementedFollowersServiceServer) GetRecommendedUsers(context.Context, *GetRecommendedUsersRequest) (*GetRecommendedUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendedUsers not implemented")
}
func (UnimplementedFollowersServiceServer) Unfollow(context.Context, *UnfollowRequest) (*UnfollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfollow not implemented")
}
func (UnimplementedFollowersServiceServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowersServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFollowersServiceServer) mustEmbedUnimplementedFollowersServiceServer() {}

// UnsafeFollowersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowersServiceServer will
// result in compilation errors.
type UnsafeFollowersServiceServer interface {
	mustEmbedUnimplementedFollowersServiceServer()
}

func RegisterFollowersServiceServer(s grpc.ServiceRegistrar, srv FollowersServiceServer) {
	s.RegisterService(&FollowersService_ServiceDesc, srv)
}

func _FollowersService_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetUserByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetFollowers(ctx, req.(*GetFollowersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetFollowings(ctx, req.(*GetFollowingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_GetRecommendedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendedUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).GetRecommendedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_GetRecommendedUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).GetRecommendedUsers(ctx, req.(*GetRecommendedUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Unfollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Unfollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Unfollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Unfollow(ctx, req.(*UnfollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowersService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowersServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowersService_ServiceDesc is the grpc.ServiceDesc for FollowersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FollowersService",
	HandlerType: (*FollowersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUsername",
			Handler:    _FollowersService_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetFollowers",
			Handler:    _FollowersService_GetFollowers_Handler,
		},
		{
			MethodName: "GetFollowings",
			Handler:    _FollowersService_GetFollowings_Handler,
		},
		{
			MethodName: "GetRecommendedUsers",
			Handler:    _FollowersService_GetRecommendedUsers_Handler,
		},
		{
			MethodName: "Unfollow",
			Handler:    _FollowersService_Unfollow_Handler,
		},
		{
			MethodName: "Follow",
			Handler:    _FollowersService_Follow_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FollowersService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followers_service.proto",
}
